import mysql.connector
from config import USER, PASSWORD, HOST, DATABASE


class DbConnectionError(Exception):
    pass

#Function to connect to the database
def connect_to_db():
    connection = mysql.connector.connect(
        host = HOST,
        user = USER,
        password = PASSWORD,
        database = DATABASE)

    return connection


def get_all_books():
    db_connection = None
    try:
        db_connection = connect_to_db()
        cur = db_connection.cursor()
        query = """SELECT * FROM Authors"""
        cur.execute(query)
        result = cur.fetchall()
        cur.close()
        return result

    except Exception:
        raise DbConnectionError("Failed to read data from DB")

    finally:
        if db_connection:
            db_connection.close()


def add_new_book(new_book):
    db_connection = None
    try:
        db_connection = connect_to_db()
        cur = db_connection.cursor()

        query = f"""
         INSERT INTO Authors (AuthorName, Genre, BookTitle)
         VALUES ('{new_book['AuthorName']}', '{new_book['Genre']}', '{new_book['BookTitle']}')
         """
        cur.execute(query)
        db_connection.commit()
        query = """SELECT * FROM Authors"""
        cur.execute(query)
        result = cur.fetchall()
        cur.close()
        return result

    except Exception:
        raise DbConnectionError("Failed to read data from DB")

    finally:
        if db_connection:
            db_connection.close()


def delete_book(id):
    try:
        db_connection = connect_to_db()
        cur = db_connection.cursor()
        del_query = """DELETE FROM Authors WHERE AuthorID = {}""".format(id)
        cur.execute(del_query)
        db_connection.commit()
        select_query = "SELECT * FROM Authors"
        cur.execute(select_query)
        remaining_books = cur.fetchall()
        cur.close()

        return remaining_books


    except Exception:
        raise DbConnectionError("Failed to read data from DB")

    finally:
        if db_connection:
            db_connection.close()
            print("DB connection is closed")


if __name__ == "__main__":
    print("TESTING DB CONNECTION")
    print(get_all_books())